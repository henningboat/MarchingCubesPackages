#include "Includes/DistanceFieldTriangulation.hlsl"

float4 _Time;
#pragma kernel ResetSubChunkTriangleCount
#pragma kernel GetTrianglePositions
#pragma kernel BuildIndexBuffer

StructuredBuffer<float4> _NormalBuffer;

StructuredBuffer<int4> _TerrainChunkBasePosition;

#include "Includes/GlobalDistanceField.hlsl"

groupshared float3 _GeneratedNormals;


struct VertexData
{
    float4 vertex;
    float3 normal;
    int materialData;
};

struct TriangulationInstruction
{
    int3 positionWS;
    int cubeIndex;
    int vertexBufferPosition;
    int3 padding;
};

AppendStructuredBuffer<TriangulationInstruction> _ValidTrianglePositions;
StructuredBuffer<TriangulationInstruction> _ValidTrianglePositionResults;
RWStructuredBuffer<VertexData> triangles;
RWStructuredBuffer<int> _TriangleIndices;
RWStructuredBuffer<int> _TriangleCountPerSubChunk;
StructuredBuffer<int> _TriangleCountPerSubChunkResult;

uint triangleWriteIndex = 0;

//todo make int3?
float isoLevel;

groupshared int groupTriangleCount = 0;


[numthreads(1,1,1)]
void ResetSubChunkTriangleCount(uint3 id : SV_DispatchThreadID)
{
    const int3 terrainChunkBasePosition = _TerrainChunkBasePosition[id.x].xyz + 2;
    const int subChunkIndexInCluster = GetSubChunkIndexFromPosition(terrainChunkBasePosition);

    _TriangleCountPerSubChunk[subChunkIndexInCluster] = 0;
}


[numthreads(4,4,4)]
void GetTrianglePositions(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex,
                          uint3 groupThreadID:SV_GroupThreadID)
{
    const uint chunkIndex = id.x / 4;
    const int3 terrainChunkBasePosition = _TerrainChunkBasePosition[chunkIndex].xyz;

    int3 positionWS = groupThreadID + terrainChunkBasePosition;

    float4 cubeCorners[8] = {
        GetPointPosition((int3(positionWS.x, positionWS.y, positionWS.z))),
        GetPointPosition((int3(positionWS.x + 1, positionWS.y, positionWS.z))),
        GetPointPosition((int3(positionWS.x + 1, positionWS.y, positionWS.z + 1))),
        GetPointPosition((int3(positionWS.x, positionWS.y, positionWS.z + 1))),
        GetPointPosition((int3(positionWS.x, positionWS.y + 1, positionWS.z))),
        GetPointPosition((int3(positionWS.x + 1, positionWS.y + 1, positionWS.z))),
        GetPointPosition((int3(positionWS.x + 1, positionWS.y + 1, positionWS.z + 1))),
        GetPointPosition((int3(positionWS.x, positionWS.y + 1, positionWS.z + 1)))
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w > isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w > isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w > isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w > isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w > isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w > isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w > isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w > isoLevel) cubeIndex |= 128;

    const int subChunkIndexInCluster = GetSubChunkIndexFromPosition(positionWS);

    if (cubeIndex == 0 || cubeIndex == 255)
        return;

    const int triangleCount = trianglesPerCubeIndex[cubeIndex];

    int offsetInSubChunk;

    InterlockedAdd(_TriangleCountPerSubChunk[subChunkIndexInCluster], triangleCount, offsetInSubChunk);

    const int maxTrianglesPerSubChunk = 4 * 4 * 4 * 5;

    // TriangulationInstruction result = (TriangulationInstruction)0;
    // result.positionWS=positionWS;
    // result.cubeIndex=cubeIndex;
    // result.padding=subChunkIndexInCluster;
    //
    // result.vertexBufferPosition =  3 * maxTrianglesPerSubChunk * subChunkIndexInCluster + indexForTriangle;
    //     
    // _ValidTrianglePositions.Append(result);

    int baseIndex = 3 * maxTrianglesPerSubChunk * subChunkIndexInCluster + offsetInSubChunk;

    for (int i = 0; triangulation[cubeIndex][i] != -1; i ++)
    {
        _TriangleIndices[baseIndex + i] = PackTriangle(positionWS, triangulation[cubeIndex][i], i);
    }
}

RWStructuredBuffer<int> _ArgsBuffer;

[numthreads(1,1,1)]
void CalculateTriangulationThreadGroupSizeKernel()
{
    _ArgsBuffer[1] = ceil(_ArgsBuffer[0] / 512.0f);
}


uint packVertexColor(float4 data)
{
    uint packed = 0;

    packed |= uint(data.x) << 24;
    packed |= uint(data.y) << 16;
    packed |= uint(data.z) << 8;
    packed |= uint(data.w);

    return packed;
}

RWStructuredBuffer<int> _ClusterMeshIndexBuffer;
RWStructuredBuffer<uint> _IndexBufferCounter;
StructuredBuffer<int> _AllVertexData;

int _TriangulationSubChunkCount;
int _IndexBufferSize;

[numthreads(1,1,1)]
void BuildIndexBuffer(uint3 id : SV_DispatchThreadID)
{
    int3 subClusterPosition = _TerrainChunkBasePosition[id.x].xyz + 2;
    int subChunkIndexInCluster = GetSubChunkIndexFromPosition(subClusterPosition);

    int vertexCountOfSubChunk = _TriangleCountPerSubChunkResult[subChunkIndexInCluster];
    int indexBufferOffset = 0;
    InterlockedAdd(_IndexBufferCounter[0], vertexCountOfSubChunk, indexBufferOffset);

    int maxVertsPerCluster = 4 * 4 * 4 * 5 * 3;

    int vertexOffset = maxVertsPerCluster * subChunkIndexInCluster;

    AllMemoryBarrier();

    for (int i = 0; i < maxVertsPerCluster; i++)
    {
        if (i < vertexCountOfSubChunk)
        {
            _ClusterMeshIndexBuffer[indexBufferOffset + i] = _AllVertexData[vertexOffset + i];
        }
    }
}
